type AuctionBid @entity {
  id: ID!
  tokenId: Int!
  dao: String!
  sender: String!
  value: String!
  extended: Boolean!
  createdAt: Int!
}

type AuctionCreated @entity {
  id: ID!
  tokenId: Int!
  dao: String!
  startTime: Int!
  endTime: Int!
  createdAt: Int!
}

type AuctionExtended @entity {
  id: ID!
  tokenId: Int!
  dao: String!
  endTime: Int!
  createdAt: Int!
}

type AuctionMinBidIncrementPercentageUpdated @entity {
  id: ID!
  dao: String!
  minBidIncrementPercentage: Int!
  createdAt: Int!
}

type AuctionReservePriceUpdated @entity {
  id: ID!
  dao: String!
  reservePrice: String!
  createdAt: Int!
}

type AuctionSettled @entity {
  id: ID!
  tokenId: Int!
  dao: String!
  winner: String!
  amount: String!
  createdAt: Int!
}

type AuctionTimeBufferUpdated @entity {
  id: ID!
  dao: String!
  timeBuffer: Int!
  createdAt: Int!
}

type OwnershipTransferred @entity {
  id: ID!
  dao: String!
  previousOwner: String!
  newOwner: String!
  createdAt: Int!
}

type Paused @entity {
  id: ID!
  dao: String!
  account: String!
  createdAt: Int!
}

type Unpaused @entity {
  id: ID!
  dao: String!
  account: String!
  createdAt: Int!
}

type Approval @entity {
  id: ID!
  dao: String!
  owner: String!
  approved: String!
  tokenId: Int!
  createdAt: Int!
}

type ApprovalForAll @entity {
  id: ID!
  dao: String!
  owner: String!
  operator: String!
  approved: Boolean!
  createdAt: Int!
}

type DelegateChanged @entity {
  id: ID!
  dao: String!
  delegator: String!
  fromDelegate: String!
  toDelegate: String!
  createdAt: Int!
}

type DelegateVotesChanged @entity {
  id: ID!
  dao: String!
  delegate: String!
  previousBalance: Int!
  newBalance: Int!
  createdAt: Int!
}

type NounBurned @entity {
  id: ID!
  dao: String!
  tokenId: Int!
  createdAt: Int!
}

type NounCreated @entity {
  id: ID!
  dao: String!
  seed: String!
  tokenId: Int!
  createdAt: Int!
}

type Transfer @entity {
  id: ID!
  dao: String!
  from: String!
  to: String!
  tokenId: Int!
  createdAt: Int!
}

type ProposalCanceled @entity {
  id: ID!
  dao: String!
  proposalId: Int!
  createdAt: Int!
}

type ProposalCreated @entity {
  id: ID!
  dao: String!
  proposalId: Int!
  proposer: String!
  # targets: [String!]!
  # values: [String!]!
  # signatures: [String!]!
  # calldatas: [String!]!
  startBlock: Int!
  endBlock: Int!
  description: String!
  createdAt: Int!
}

type ProposalExecuted @entity {
  id: ID!
  dao: String!
  proposalId: Int!
  createdAt: Int!
}

type ProposalQueued @entity {
  id: ID!
  dao: String!
  proposalId: Int!
  eta: Int!
  createdAt: Int!
}

type ProposalVetoed @entity {
  id: ID!
  dao: String!
  proposalId: Int!
  createdAt: Int!
}

type RefundableVote @entity {
  id: ID!
  dao: String!
  voter: String!
  refundAmount: String!
  refundSent: Boolean!
  createdAt: Int!
}

type VoteCast @entity {
  id: ID!
  dao: String!
  voter: String!
  proposalId: Int!
  support: Int!
  votes: Int!
  reason: String!
  createdAt: Int!
}
